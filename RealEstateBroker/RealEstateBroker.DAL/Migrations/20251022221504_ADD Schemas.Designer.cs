// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealEstateBroker.DAL.DataBase_Contexts;

#nullable disable

namespace RealEstateBroker.DAL.Migrations
{
    [DbContext(typeof(RealEstateBrokerDbContext))]
    [Migration("20251022221504_ADD Schemas")]
    partial class ADDSchemas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RealEstateBroker.DAL.Models.Amenity", b =>
                {
                    b.Property<Guid>("PropertyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasElectricityLine")
                        .HasColumnType("bit");

                    b.Property<bool>("HasGasLine")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWaterLine")
                        .HasColumnType("bit");

                    b.HasKey("PropertyID");

                    b.ToTable("Amenities", "properties");
                });

            modelBuilder.Entity("RealEstateBroker.DAL.Models.Comment", b =>
                {
                    b.Property<Guid>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PropertyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isLiked")
                        .HasColumnType("bit");

                    b.HasKey("CommentID");

                    b.HasIndex("PropertyID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments", "interactions");
                });

            modelBuilder.Entity("RealEstateBroker.DAL.Models.Compound", b =>
                {
                    b.Property<Guid>("CompoundID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompoundID");

                    b.ToTable("Compounds", "properties");
                });

            modelBuilder.Entity("RealEstateBroker.DAL.Models.Property", b =>
                {
                    b.Property<Guid>("PropertyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AgentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompoundID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateListed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleMapsURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("PropertyPurpose")
                        .HasColumnType("int");

                    b.Property<int>("PropertyStatus")
                        .HasColumnType("int");

                    b.Property<int>("PropertyType")
                        .HasColumnType("int");

                    b.Property<float>("Square")
                        .HasColumnType("real");

                    b.HasKey("PropertyID");

                    b.HasIndex("AgentID");

                    b.HasIndex("CompoundID");

                    b.ToTable("Properties", "properties");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("RealEstateBroker.DAL.Models.PropertyGallery", b =>
                {
                    b.Property<Guid>("MediaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PropertyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MediaID");

                    b.HasIndex("PropertyID");

                    b.ToTable("PropertyGalleries", "properties");
                });

            modelBuilder.Entity("RealEstateBroker.DAL.Models.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.ToTable("Users", "accounts");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("RealEstateBroker.DAL.Models.WishList", b =>
                {
                    b.Property<Guid>("ListingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PropertyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ListingID");

                    b.HasIndex("PropertyID");

                    b.HasIndex("UserID");

                    b.ToTable("WishLists", "interactions");
                });

            modelBuilder.Entity("RealEstateBroker.DAL.Models.CommercialProperty", b =>
                {
                    b.HasBaseType("RealEstateBroker.DAL.Models.Property");

                    b.Property<string>("BusinessType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<bool>("HasStorage")
                        .HasColumnType("bit");

                    b.ToTable("CommercialProperties", "properties");
                });

            modelBuilder.Entity("RealEstateBroker.DAL.Models.ResidentialProperty", b =>
                {
                    b.HasBaseType("RealEstateBroker.DAL.Models.Property");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<int>("Floors")
                        .HasColumnType("int");

                    b.Property<int>("KitchenType")
                        .HasColumnType("int");

                    b.ToTable("ResidentialProperties", "properties");
                });

            modelBuilder.Entity("RealEstateBroker.DAL.Models.Agent", b =>
                {
                    b.HasBaseType("RealEstateBroker.DAL.Models.User");

                    b.Property<string>("AgencyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("TaxIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Agents", "accounts");
                });

            modelBuilder.Entity("RealEstateBroker.DAL.Models.Broker", b =>
                {
                    b.HasBaseType("RealEstateBroker.DAL.Models.User");

                    b.Property<int>("LicenseID")
                        .HasColumnType("int");

                    b.Property<int>("NationalID")
                        .HasColumnType("int");

                    b.ToTable("Brokers", "accounts");
                });

            modelBuilder.Entity("RealEstateBroker.DAL.Models.Amenity", b =>
                {
                    b.HasOne("RealEstateBroker.DAL.Models.Property", "Property")
                        .WithOne("Amenity")
                        .HasForeignKey("RealEstateBroker.DAL.Models.Amenity", "PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstateBroker.DAL.Models.Comment", b =>
                {
                    b.HasOne("RealEstateBroker.DAL.Models.Property", "Property")
                        .WithMany("Comments")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateBroker.DAL.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstateBroker.DAL.Models.Property", b =>
                {
                    b.HasOne("RealEstateBroker.DAL.Models.Agent", "Agent")
                        .WithMany("Properties")
                        .HasForeignKey("AgentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateBroker.DAL.Models.Compound", "Compound")
                        .WithMany("Properties")
                        .HasForeignKey("CompoundID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Compound");
                });

            modelBuilder.Entity("RealEstateBroker.DAL.Models.PropertyGallery", b =>
                {
                    b.HasOne("RealEstateBroker.DAL.Models.Property", "Property")
                        .WithMany("PropertyGalleries")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstateBroker.DAL.Models.WishList", b =>
                {
                    b.HasOne("RealEstateBroker.DAL.Models.Property", "Property")
                        .WithMany("WishLists")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateBroker.DAL.Models.User", "User")
                        .WithMany("WishLists")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstateBroker.DAL.Models.CommercialProperty", b =>
                {
                    b.HasOne("RealEstateBroker.DAL.Models.Property", null)
                        .WithOne()
                        .HasForeignKey("RealEstateBroker.DAL.Models.CommercialProperty", "PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateBroker.DAL.Models.ResidentialProperty", b =>
                {
                    b.HasOne("RealEstateBroker.DAL.Models.Property", null)
                        .WithOne()
                        .HasForeignKey("RealEstateBroker.DAL.Models.ResidentialProperty", "PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateBroker.DAL.Models.Agent", b =>
                {
                    b.HasOne("RealEstateBroker.DAL.Models.User", null)
                        .WithOne()
                        .HasForeignKey("RealEstateBroker.DAL.Models.Agent", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateBroker.DAL.Models.Broker", b =>
                {
                    b.HasOne("RealEstateBroker.DAL.Models.User", null)
                        .WithOne()
                        .HasForeignKey("RealEstateBroker.DAL.Models.Broker", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateBroker.DAL.Models.Compound", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("RealEstateBroker.DAL.Models.Property", b =>
                {
                    b.Navigation("Amenity")
                        .IsRequired();

                    b.Navigation("Comments");

                    b.Navigation("PropertyGalleries");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("RealEstateBroker.DAL.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("RealEstateBroker.DAL.Models.Agent", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
